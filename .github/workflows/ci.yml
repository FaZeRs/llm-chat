name: ci
on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  release:
    types: [published]
  push:
    tags:
      - '*'
    branches:
      - main
      - develop

env:
  VERBOSE: 1


jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        compiler:
          - llvm
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: llvm
        include:
          - os: ubuntu-latest
            qt_host: linux
            qt_arch: gcc_64
            
          - os: macos-latest
            qt_host: mac
            qt_arch: clang_64

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            qt_host: windows
            qt_arch: win64_msvc2019_64
            build_type: Release

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            qt_host: windows
            qt_arch: win64_msvc2019_64
            build_type: Debug

          - compiler: gcc
            gcov_executable: gcov

          - compiler: llvm
            gcov_executable: "llvm-cov gcov"

    steps:
      - name: Install dependencies
        if: "${{ contains(matrix.os, 'ubuntu') }}"
        run: sudo apt-get install -y libcurl4-openssl-dev libxcb-xinerama0 libxkbcommon-dev libxkbcommon-x11-dev doxygen graphviz

      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: true
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.0'
          host: ${{ matrix.qt_host }}
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          install-deps: 'true'
          cache: 'true'
          tools: 'tools_ifw'
          aqtversion: '==3.1.*'
          py7zrversion: '==0.20.*'

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DENABLE_DOCS:BOOL=${{ contains(matrix.os, 'ubuntu') }}

      - name: Build
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml